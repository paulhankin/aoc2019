CC = """3,225,1,225,6,6,1100,1,238,225,104,0,1102,83,20,225,1102,55,83,224,1001,224,-4565,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,52,15,225,1102,42,92,225,1101,24,65,225,101,33,44,224,101,-125,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,39,75,224,101,-127,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,2,14,48,224,101,-1300,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1002,139,79,224,101,-1896,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,24,92,225,1101,20,53,224,101,-73,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,70,33,225,1101,56,33,225,1,196,170,224,1001,224,-38,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1101,50,5,225,102,91,166,224,1001,224,-3003,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,389,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,434,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,494,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,509,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226"""
CC = [int(x) for x in CC.split(',')]

def readC(C, x, mode):
	if mode == 0:
		return C[C[x]]
	if mode == 1:
		return C[x]
	assert False, "unknown mode %s" % mode


def intcode(C, input, output):
	pc = 0
	input = iter(input)
	while True:
		ins = C[pc]
		op4m = (ins // 100000) % 10
		op3m = (ins // 10000) % 10
		op2m = (ins // 1000) % 10
		op1m = (ins // 100) % 10
		de = ins % 100
		assert de + 100 * op1m + 1000 * op2m + 10000 * op3m + 100000 * op4m == ins
		if de == 1: # add
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			op3 = C[pc+3]
			C[op3] = op1 + op2
			pc += 4
		elif de == 2: # mul
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			op3 = C[pc+3]
			C[op3] = op1 * op2
			pc += 4
		elif de == 3: # input
			op1 = C[pc+1]
			C[op1] = next(input)
			pc += 2
		elif de == 4: # output
			op1 = readC(C, pc+1, op1m)
			output(op1)
			pc += 2
		elif de == 5: # jump-if-true
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			if op1:
				pc = op2
			else:
				pc += 3
		elif de == 6: # jump-if-false
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			if not op1:
				pc = op2
			else:
				pc += 3
		elif de == 7: # less-than
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			op3 = C[pc+3]
			C[op3] = 1 if op1 < op2 else 0
			pc += 4
		elif de == 8: # equals
			op1 = readC(C, pc+1, op1m)
			op2 = readC(C, pc+2, op2m)
			op3 = C[pc+3]
			C[op3] = 1 if op1 == op2 else 0
			pc += 4
		elif de == 99:
			return C[0]
		else:
			assert False, "unknown instruction %s" % ins

def run(prog, inp):
	outz = []

	def out(x):
		outz.append(x)

	intcode(prog, inp, out)
	return outz

tests = [
	# input is equal to 8, pos mode
	[[3,9,8,9,10,9,4,9,99,-1,8], [7], [0]],
	[[3,9,8,9,10,9,4,9,99,-1,8], [8], [1]],
	[[3,9,8,9,10,9,4,9,99,-1,8], [123], [0]],

	# input is less than 8, pos mode
	[[3,9,7,9,10,9,4,9,99,-1,8], [-12], [1]],
	[[3,9,7,9,10,9,4,9,99,-1,8], [7], [1]],
	[[3,9,7,9,10,9,4,9,99,-1,8], [8], [0]],
	[[3,9,7,9,10,9,4,9,99,-1,8], [9], [0]],

	# input is equal to 8, imm mode
	[[3,3,1108,-1,8,3,4,3,99], [7], [0]],
	[[3,3,1108,-1,8,3,4,3,99], [8], [1]],
	[[3,3,1108,-1,8,3,4,3,99], [123], [0]],

	# input is less than 8, imm mode
	[[3,3,1107,-1,8,3,4,3,99], [-12], [1]],
	[[3,3,1107,-1,8,3,4,3,99], [7], [1]],
	[[3,3,1107,-1,8,3,4,3,99], [8], [0]],
	[[3,3,1107,-1,8,3,4,3,99], [9], [0]],

	# input non-zero, pos mode
	[[3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [0], [0]],
	[[3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [1], [1]],
	[[3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [-1], [1]],

	# input non-zero, imm mode
	[[3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [0], [0]],
	[[3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [1], [1]],
	[[3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [-1], [1]],

	# 999 if input < 8, 1000 if input == 8, 1001 if input > 8
	[[3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
	  1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
	  999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [-3], [999]],
	[[3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
	  1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
	  999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [7], [999]],
	[[3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
	  1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
	  999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [8], [1000]],
	[[3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
	  1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
	  999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [9], [1001]],
	[[3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
	  1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
	  999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [15], [1001]],

]

print('running unit tests:')
failed = 0
count = 0
for C, ins, want in tests:
	count += 1
	try:
		got = run(C[:], ins)
		if got != want:
			print("test(%s) = %s, want %s" % ((C, ins), got, want))
			failed += 1
	except Exception as exp:
		print("test(%s) crashed with exception %s" % ((C, ins), exp))
		failed += 1
print("%d/%d PASSED" %(count - failed, count))
if failed:
	os.exit(1)

for inv in [1, 5]:
	print('running diagnostic %d' % inv)
	print('  outputs: %s' % run(CC[:], [inv]))
